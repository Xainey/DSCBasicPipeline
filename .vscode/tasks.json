// A task runner that invokes Pester to run all Pester tests under the
// current workspace folder.
// NOTE: This Test task runner requires an updated version of Pester (>=3.4.0)
// in order for the problemMatcher to find failed test information (message, line, file).
// If you don't have that version, you can update Pester from the PowerShell Gallery
// with this command:
//
// PS C:\> Update-Module Pester
//
// If that gives an error like:
// "Module 'Pester' was not installed by using Install-Module, so it cannot be updated."
// then execute:
//
// PS C:\> Install-Module Pester -Scope CurrentUser -Force
//
// NOTE: The Clean, Build and Publish tasks require PSake. PSake can be installed
// from the PowerShell Gallery with this command:
//
// PS C:\> Install-Module PSake -Scope CurrentUser -Force
//
// Available variables which can be used inside of strings.
// ${workspaceRoot}: the root folder of the team
// ${file}: the current opened file
// ${fileBasename}: the current opened file's basename
// ${fileDirname}: the current opened file's dirname
// ${fileExtname}: the current opened file's extension
// ${cwd}: the current working directory of the spawned process
{
    "version": "0.1.0",
    // Start PowerShell
    "command": "${env.windir}\\sysnative\\windowspowershell\\v1.0\\PowerShell.exe",
    // The command is a shell script
    "isShellCommand": true,
    // Show the output window always
    "showOutput": "always",
    "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "bypass"
    ],
    // Associate with test task runner
    "tasks": [
        {
            "taskName": "KitchenCreate",
            "suppressTaskName": true,
            "showOutput": "always",
            "args": [
                "Write-Host 'Invoking Kitchen...';  &kitchen create;",
                "Invoke-Command { Write-Host 'Completed Kitchen Create in task runner.' }"
            ]
        },
        {
            "taskName": "KitchenConverge",
            "suppressTaskName": true,
            "showOutput": "always",
            "args": [
                "Write-Host 'Invoking Kitchen...'; &kitchen converge;",
                "Invoke-Command { Write-Host 'Completed Kitchen Converge task in task runner.' }"
            ]
        },
        {
            "taskName": "KitchenVerify",
            "suppressTaskName": true,
            "showOutput": "always",
            "args": [
                "Write-Host 'Invoking Kitchen...'; &kitchen verify;",
                "Invoke-Command { Write-Host 'Completed Kitchen Verify task in task runner.' }"
            ]
        },
        {
            "taskName": "KitchenDestroy",
            "suppressTaskName": true,
            "showOutput": "always",
            "args": [
                "Write-Host 'Invoking Kitchen...'; &kitchen destroy;",
                "Invoke-Command { Write-Host 'Completed Kitchen Destroy task in task runner.' }"
            ]
        },                 
        {
            "taskName": "PSakeAnalyze",
            "suppressTaskName": true,
            "showOutput": "always",
            "args": [
                "Write-Host 'Invoking PSake...'; ./build.ps1 -Task Analyze;",
                "Invoke-Command { Write-Host 'Completed PSakeAnalyze task in task runner.' }"
            ]
        },
        {
            "taskName": "PSakeTest",
            "suppressTaskName": true,
            "showOutput": "always",
            "args": [
                "Write-Host 'Invoking PSake...'; ./build.ps1 -Task Test",
                "Invoke-Command { Write-Host 'Completed PSakeTest task in task runner.' }"
            ]
        },
        {
            "taskName": "PSakeDeploy",
            "suppressTaskName": true,
            "showOutput": "always",
            "args": [
                "Write-Host 'Invoking PSake...'; ./build.ps1 -Task Deploy",
                "Invoke-Command { Write-Host 'Completed PSakeDeploy task in task runner.' }"
            ]
        },            
        {
            "taskName": "PesterUnitTests",
            "suppressTaskName": true,
            "isTestCommand": true,
            "showOutput": "always",
            "args": [
                // Issue with local Execution Policy: Sloppy force-fix
                "Set-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\PowerShell -Name ExecutionPolicy -Value Unrestricted;",
                "$env:PSExecutionPolicyPreference = 'Unrestricted';",
                
                "Write-Host 'Invoking Pester...'; Invoke-Pester ./Tests/Unit* -PesterOption @{IncludeVSCodeMarker=$true};",
                "Invoke-Command { Write-Host 'Completed Test task in task runner.' }"
            ],
            "problemMatcher": [
                {
                    "owner": "powershell",
                    "fileLocation": [
                        "absolute"
                    ],
                    "severity": "error",
                    "pattern": [
                        {
                            "regexp": "^\\s*(\\[-\\]\\s*.*?)(\\d+)ms\\s*$",
                            "message": 1
                        },
                        {
                            "regexp": "^\\s+at\\s+[^,]+,\\s*(.*?):\\s+line\\s+(\\d+)$",
                            "file": 1,
                            "line": 2
                        }
                    ]
                }
            ]
        }
    ]
}
